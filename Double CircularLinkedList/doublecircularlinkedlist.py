# -*- coding: utf-8 -*-
"""DoubleCircularLinkedList.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s4ex8tqkCgKs1jW_eG68JQLonVTUp1oQ
"""

class Node:
  next = None
  data = None

class DCLinkedList:
  def __init__(self):
    self.head = None
    self.tail = None

  def add(self,data):
    lists = Node()
    lists.data = data
    if self.head == None:
      self.head = lists
      self.tail = lists
      self.head.next = self.head
      self.head.back = self.head
      
    else :
      lastList = self.tail
      lastList.next = lists
      lists.back = lastList
      self.tail = lists
      self.tail.next = self.head
      self.head.back = self.tail

  def delete(self,data):
    """delete first data that match"""
    temp = self.head
    if self.head.data == data:
      self.head = self.head.next
      self.head.back = self.tail
      self.tail.next = self.head
      print("data {} has been removed".format(data))
      return

    pointerCurrent = self.head.next  
    while pointerCurrent != self.head:
      if pointerCurrent.data == data:
        before = pointerCurrent.back
        after = pointerCurrent.next
        if pointerCurrent.data == self.tail.data:
          self.tail = before
          self.tail.next = self.head
          self.head.back = self.tail
        else :
          before.next = after
          after.back = before
        print("data {} has been removed".format(data))
        return
      pointerCurrent = pointerCurrent.next

    print("There is no data {} in list, use method prints to see the list".format(data))

  def prints(self):
    temp = self.head
    isTail = False
    while not isTail:
      isTail = (temp == self.tail)
      before = temp.back.data if temp.back!= None else None
      after = temp.next.data if temp.next != None else None
      print(before,
            temp.data,
            after)
      temp = temp.next

singular = DCLinkedList()
singular.add(1)

singular.add(2)

singular.add(3)

singular.add(4)

singular.prints()

singular.delete(3)

singular.prints()

singular.delete(5)

singular.prints()

singular.delete(1)

singular.prints()

singular.head.data

singular.tail.data

singular.delete(4)

singular.prints()

singular.head.data

singular.tail.data